{"version":3,"sources":["modules/icons/perfect-day.svg","modules/CityComponent.js","modules/icons/sunny.svg","modules/icons/night.svg","modules/icons/temp.svg","modules/icons/humidity.svg","modules/icons/wind.svg","modules/icons/pressure.svg","modules/icons/day.svg","modules/icons/cloudy-night.svg","modules/icons/cloudy.svg","modules/icons/rain.svg","modules/icons/rain-night.svg","modules/icons/storm.svg","modules/icons/haze.svg","modules/WeatherInfoComponent.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherLogo","styled","img","ChooseCityLabel","span","SearchBox","CityComponent","props","updateCity","fetchWeather","src","perfectDay","onClick","placeholder","onChange","e","target","value","type","WeatherInfoIcons","sunset","temp","sunrise","humidity","wind","pressure","WeatherIcons","sunny","night","day","cloudynight","cloudy","perfectday","rain","rainnight","strom","haze","WeatherCondition","div","Condition","WeatherIcon","Location","WeatherInfoLabel","WeatherInfoContainer","InfoContainer","InfoIcon","InfoLabel","WeatherInfoComponent","name","WeatherComponent","timeStamp","weather","isDay","icon","includes","style","padding","margin","textDecoration","backgroundColor","color","href","Math","floor","main","description","sys","country","Date","getHours","getMinutes","speed","Container","AppLabel","App","useState","city","updateWeather","a","preventDefault","axios","get","response","console","log","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3368e80.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/perfect-day.5156c281.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport perfectDay from \"./icons/perfect-day.svg\";\n\nconst WeatherLogo = styled.img`\n  width: 140px;\n  height: 140px;\n  margin: 40px auto;\n`;\n\nconst ChooseCityLabel = styled.span`\n  color: black;\n  font-size: 18px;\n  font-weight: bold;\n  margin: 10px auto;\n`;\n\nconst SearchBox = styled.span`\n  display: flex;\n  flex-direction: row;\n  border: black solid 1px;\n  color: black;\n  font-size: 18px;\n  margin: 10px auto;\n  & input {\n    padding: 10px;\n    font-size: 14px;\n    border: none;\n    outline: none;\n    font-weight: bold;\n  }\n\n  & button {\n    padding: 10px;\n    font-size: 14px;\n    color: white;\n    background-color: black;\n    border: none;\n    outline: none;\n    font-weight: bold;\n    cursor: pointer;\n  }\n`;\nconst CityComponent = (props) => {\n  const { updateCity, fetchWeather } = props;\n  return (\n    <>\n      <WeatherLogo src={perfectDay} />\n      <ChooseCityLabel>Find Weather of your city</ChooseCityLabel>\n      <SearchBox onClick={fetchWeather}>\n        <input\n          placeholder=\"City\"\n          onChange={(e) => updateCity(e.target.value)}\n        />\n        <button type={\"submit\"}>Search</button>\n      </SearchBox>\n    </>\n  );\n};\n\nexport default CityComponent;\n","export default __webpack_public_path__ + \"static/media/sunny.bbbee777.svg\";","export default __webpack_public_path__ + \"static/media/night.cc9b9fc2.svg\";","export default __webpack_public_path__ + \"static/media/temp.aa236718.svg\";","export default __webpack_public_path__ + \"static/media/humidity.38d0c2ff.svg\";","export default __webpack_public_path__ + \"static/media/wind.d35fef2c.svg\";","export default __webpack_public_path__ + \"static/media/pressure.37f0a961.svg\";","export default __webpack_public_path__ + \"static/media/day.c5cf49fb.svg\";","export default __webpack_public_path__ + \"static/media/cloudy-night.bdd63c6a.svg\";","export default __webpack_public_path__ + \"static/media/cloudy.755396fe.svg\";","export default __webpack_public_path__ + \"static/media/rain.efd4d66c.svg\";","export default __webpack_public_path__ + \"static/media/rain-night.bcabe4fb.svg\";","export default __webpack_public_path__ + \"static/media/storm.7741b2c5.svg\";","export default __webpack_public_path__ + \"static/media/haze.ed3a4481.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport sunny from \"./icons/sunny.svg\";\nimport night from \"./icons/night.svg\";\n\nimport temp from \"./icons/temp.svg\";\nimport humidity from \"./icons/humidity.svg\";\nimport wind from \"./icons/wind.svg\";\nimport pressure from \"./icons/pressure.svg\";\nimport day from \"./icons/day.svg\";\nimport cloudynight from \"./icons/cloudy-night.svg\";\nimport cloudy from \"./icons/cloudy.svg\";\nimport perfectday from \"./icons/perfect-day.svg\";\nimport rain from \"./icons/rain.svg\";\nimport rainnight from \"./icons/rain-night.svg\";\nimport strom from \"./icons/storm.svg\";\nimport haze from \"./icons/haze.svg\";\n\nexport const WeatherInfoIcons = {\n  sunset: temp,\n  sunrise: temp,\n  humidity: humidity,\n  wind: wind,\n  pressure: pressure,\n};\n\nconst WeatherIcons = {\n  \"01d\": sunny,\n  \"01n\": night,\n  \"02d\": day,\n  \"02n\": cloudynight,\n  \"03d\": cloudy,\n  \"03n\": cloudy,\n  \"04d\": perfectday,\n  \"04n\": cloudynight,\n  \"09d\": rain,\n  \"09n\": rainnight,\n  \"10d\": rain,\n  \"10n\": rainnight,\n  \"11d\": strom,\n  \"11n\": strom,\n  \"13d\": haze,\n  \"13n\": haze,\n  \"50d\": haze,\n  \"50n\": haze,\n};\n\nconst WeatherCondition = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  justify-content: space-between;\n  margin: 30px auto;\n`;\n\nconst Condition = styled.span`\n  margin: 20px auto;\n  font-size: 14px;\n  & span {\n    font-size: 28px;\n  }\n`;\n\nconst WeatherIcon = styled.img`\n  width: 100px;\n  height: 100px;\n  margin: 5px auto;\n`;\n\nconst Location = styled.span`\n  font-size: 28px;\n  font-weight: bold;\n`;\n\nconst WeatherInfoLabel = styled.span`\n  font-size: 14px;\n  font-weight: bold;\n  margin: 20px 25px 10px;\n  text-align: start;\n  width: 90%;\n`;\n\nconst WeatherInfoContainer = styled.div`\n  display: flex;\n  width: 90%;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n\n  margin: 5px px;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst InfoIcon = styled.img`\n  width: 36px;\n  height: 36px;\n`;\nconst InfoLabel = styled.span`\n  display: flex;\n  flex-direction: column;\n  font-size: 28px;\n  margin: 15px;\n  & span {\n    font-size: 12px;\n    text-transform: capitalize;\n  }\n`;\n\nfunction WeatherInfoComponent(props) {\n  const { name, value } = props;\n  return (\n    <InfoContainer>\n      <InfoIcon src={WeatherInfoIcons[name]} />\n      <InfoLabel>\n        {value}\n        <span>{name}</span>\n      </InfoLabel>\n    </InfoContainer>\n  );\n}\n\nfunction WeatherComponent(props) {\n  const { weather } = props;\n  const isDay = weather?.weather[0].icon?.includes(\"d\");\n  const getTime = (timeStamp) => {\n    return `${new Date(timeStamp * 1000).getHours()} : ${new Date(\n      timeStamp * 1000\n    ).getMinutes()}`;\n  };\n  return (\n    <>\n      <button\n        style={{\n          padding: \"5px\",\n          margin: \"5px\",\n          textDecoration: \"none\",\n          backgroundColor: \"lightgray\",\n          color: \"black\",\n        }}\n      >\n        <a href=\"https://cenacrharsh.github.io/react-weather-app/\">Back</a>\n      </button>\n      <WeatherCondition>\n        <Condition>\n          <span>{`${Math.floor(weather?.main?.temp - 273)}°C`}</span> |{\" \"}\n          {`${weather?.weather[0].description}`}\n        </Condition>\n        <WeatherIcon src={WeatherIcons[weather?.weather[0].icon]} />\n      </WeatherCondition>\n      <Location>{`${weather?.name},${weather?.sys?.country}`}</Location>\n      <WeatherInfoLabel>Weather Info</WeatherInfoLabel>\n      <WeatherInfoContainer>\n        <WeatherInfoComponent\n          name={isDay ? \"sunset\" : \"sunrise\"}\n          value={getTime(weather?.sys[isDay ? \"sunset\" : \"sunrise\"])}\n        />\n        <WeatherInfoComponent\n          name={\"humidity\"}\n          value={weather?.main?.humidity}\n        />\n        <WeatherInfoComponent name={\"wind\"} value={weather?.wind?.speed} />\n        <WeatherInfoComponent\n          name={\"pressure\"}\n          value={weather?.main?.pressure}\n        />\n      </WeatherInfoContainer>\n    </>\n  );\n}\n\nexport default WeatherComponent;\n","import styled from \"styled-components\";\nimport CityComponent from \"./modules/CityComponent\";\nimport React, { useState } from \"react\";\nimport WeatherComponent from \"./modules/WeatherInfoComponent\";\nimport axios from \"axios\";\n\nconst API_KEY = \"c20e17cb7d6f16b05a5ecdf5d087ddb9\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  align-items: center;\n  box-shadow: 0 3px 6px 0 #5555;\n  border-radius: 4px;\n  width: 300px;\n  background: white;\n  font-family: Monserrat;\n`;\nconst AppLabel = styled.div`\n  color: black;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nfunction App() {\n  const [city, updateCity] = useState();\n  const [weather, updateWeather] = useState();\n\n  const fetchWeather = async (e) => {\n    e.preventDefault();\n    const response =\n      await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}\n   `);\n\n    console.log(response.data);\n\n    updateWeather(response.data);\n  };\n\n  return (\n    <Container>\n      <AppLabel>React weather app</AppLabel>\n\n      {city && weather ? (\n        <WeatherComponent weather={weather} city={city} />\n      ) : (\n        <CityComponent updateCity={updateCity} fetchWeather={fetchWeather} />\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}